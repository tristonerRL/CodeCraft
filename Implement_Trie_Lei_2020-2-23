Leetcode 208: Implement Tree(Prefix Tree)

mplement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

Solution:

* currently blocked by runtime error: NullPointerException

1.insert: traversing every character in the word string, and use a node p to record the current node that has been traversed.
	1.1 If there is no node with the current prefix, then create a new node with the responding prefix and insert it in this place
	1.2 If there is already a node with the prefix, then just replace p with the new node and keep traversing

2.search: traversing every character in the word string, and use a node p to record the current node that has been traversed.
	2.1 If there's no node with the current prefix, then return false
	2.2 If there's node with the current prefix, then keep moving the pointer to the next one
	2.3 after finishing the traversion for the word string, check if the matching node represents for a leaf node
		2.3.1 If so, return true
		2.3.2 If not, return false

3.startwith: traversing every character in the prefix string, and use a node p to record the current node that has been traversed.
	3.1 ...
	3.2 ...
	3.3 if finishing the traversion through the prefix string, then return true


Codes:

class Trie {
    public class TreeNode{
        private String prefix; // the char 
        private boolean ifLeaf; // to record if this could serve as a leaf
        public TreeNode[] children=new TreeNode[26];
        public String getKey(){
            return this.prefix;
        }
        public void setKey(String newKey){
            this.prefix=newKey;
        }
        public boolean getIfLeaf(){
            return this.ifLeaf;
        }
        public void setIfLeaf(boolean flag){
            this.ifLeaf=flag;
        }
        public TreeNode(String c,boolean flag){ //constuctor
            this.setKey(c);
            this.setIfLeaf(flag);
            for (int i=0;i<26;i++)
                children[i]=null;
        }
    }
    
    public TreeNode root;
    
    /** Initialize your data structure here. */
    public Trie() {
        this.root=new TreeNode("",false);
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TreeNode p=this.root;
        for (int i=0;i<word.length();i++){
            int c=(int) word.charAt(i)-(int)'a';
            if (p.children[c]!=null)
                p=p.children[c];
            else{
                p.children[c]=new TreeNode(p.prefix+word.charAt(i),false);
                p=p.children[c];
            }
        }
        p.setIfLeaf(true);
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TreeNode p=this.root;
        for (int i=0;i<word.length();i++){
            int c=(int) word.charAt(i)-(int)'a';
            if (p.children[c]==null)
                return false;
            else
                p=p.children[c];
        }
        if (p.getIfLeaf())
            return true;
        else 
            return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TreeNode p=this.root;
        for (int i=0;i<prefix.length();i++){
            int c=(int) prefix.charAt(i)-(int)'a';
            if (p.children[c]==null)
                return false;
            p=p.children[c];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
